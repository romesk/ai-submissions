"""Initial migration.

Revision ID: f20f475d61c2
Revises: 
Create Date: 2024-02-21 02:05:17.109223

"""
from alembic import op
import sqlalchemy as sa

from models import Level, Question, Answer


# revision identifiers, used by Alembic.
revision = 'f20f475d61c2'
down_revision = None
branch_labels = None
depends_on = None


NOVICE_DESCRIPTION = 'Новачки дуже переживають за свою успішність; їх досвіду замало, щоб повести їх у правильному напрямку і вони не знають чи їх вчинки будуть правильними. Новачки зазвичай не хочуть вчитися, зате хочуть досягти миттєвого результату. Вони не знають як реагувати на помилки і тому легко збиваються з пантелику, коли щось іде “не так”. Зате вони можуть бути досить ефективними, коли їм дати набір контекстно незалежних правил у формі “у випадку ХХХ, роби УУУ”. Іншими словами їм необхідний рецепт або алгоритм.'
ADVANCED_BEGINNER_DESCRIPTION = 'Тверді початківці починають вже потроху відступати від фіксованих правил. Вони можуть спробувати якісь задачі самостійно, але у них все ще є труднощі із усуненням проблем, які виникають. Початківці можуть скористатись порадами в правильному контексті, врахувавши свій досвід подібних ситуацій, але ледь-ледь. І хоч вони вже починають формулювати якісь загальні принципи, вони все ще не бачать “всієї картини”. Якщо спробувати надати їм ширший контекст – вони відмахнуться від нього як від недоречного.'
COMPETENT_DESCRIPTION = 'Компетентні будують правильні моделі проблемної області та ефективно нею користуються. Здатні усувати проблеми з якими раніше не стикались. Про людей на цьому рівні часто кажуть, що вони “мають ініціативу”. Вони можуть вчити новачків і не задовбують експертів. Щоправда їм ще бракує досвіду аби вдало розставити пріоритети при рішенні задач. Власне кажучи, саме з цього рівня людину можна вже назвати інженером – компетентні вирішують задачі, а не працюють за алгоритмом. '
PROFICIENT_DESCRIPTION = 'Досвідченим необхідна “повна картина” проблемної області, адже вони хочуть розуміти весь концепт. Вони роблять значний прорив в рамках моделі братів Дрейфус, адже постійно оцінюють виконану роботу і переглядають свої підходи, аби наступного разу бути ще ефективнішими. Вони також можуть навчатись використовуючи чужий досвід. І найголовніше – вони завжди беруть до уваги контекст задачі. Якщо повернутись до програмування, то чудовий приклад ілюстрації – це використання патернів проектування. Лише досвідчені використовують їх виключно там де треба, а не бездумно і повсюдно, бо це круто і модно.'
EXPERT_DESCRIPTION = 'Експерти – основне джерело знань та інформації в будь-якій сфері. Вони безперестану шукають все кращі і кращі методи роботи. Вони завжди застосовують весь свій велетенський багаж знань у правильному контексті. Вони пишуть книжки, статті та проводять семінари. Це сучасні чаклуни. Експерти керуються інтуїцією . Доктор Хаус, який з одного погляду на пацієнта (або взагалі на його медичну картку) міг поставити діагноз – типовий приклад експерта. Експерти працюють за допомогою несвідомого “порівняння з взірцем” (“pattern matching”) у базі свого досвіду. От тільки проблема в тому, що функція “порівняння з взірцем” асинхронна і знаходиться в частині мозку, яка не підконтрольна свідомості.'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('level',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('points_required', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(length=100), nullable=False),
    sa.Column('fullname', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('question',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('level_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['level_id'], ['level.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('answer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Add default values for Levels if they do not exist
    default_levels = [
        {'id': 1, 'name': 'Novice', 'description': NOVICE_DESCRIPTION, 'points_required': 5},
        {'id': 2, 'name': 'Advanced beginner', 'description': ADVANCED_BEGINNER_DESCRIPTION, 'points_required': 7},
        {'id': 3, 'name': 'Competent', 'description': COMPETENT_DESCRIPTION, 'points_required': 9},
        {'id': 4, 'name': 'Proficient', 'description': PROFICIENT_DESCRIPTION, 'points_required': 10},
        {'id': 5, 'name': 'Expert', 'description': EXPERT_DESCRIPTION, 'points_required': 12}
    ]

    for level_data in default_levels:
        level = session.query(Level).filter_by(**level_data).first()
        if not level:
            new_level = Level(**level_data)
            session.add(new_level)

    session.commit()

    # Add default values for Questions if they do not exist
    default_questions = [
        # Novice questions
        {'id': 1, 'level_id': 1, 'content': 'Переживаєте за успіх в роботі?'},
        {'id': 2, 'level_id': 1, 'content': 'Прагнете досягти швидко результату?'},
        {'id': 3, 'level_id': 1, 'content': 'Легко попадаєте в тупик при проблемах в роботі?'},
        {'id': 4, 'level_id': 1, 'content': 'Чи потрібен чіткий алгоритм для вирішення задач?'},

        # Advanced beginner questions
        {'id': 5, 'level_id': 2, 'content': 'Чи використовуєте власний досвід при вирішенні задач?'},
        {'id': 6, 'level_id': 2, 'content': 'Чи користуєтесь фіксованими правилами  для вирішення задач?'},
        {'id': 7, 'level_id': 2, 'content': 'Чи відчуваєте ви загальний контекст вирішення задачі?'},

        # Competent questions
        {'id': 8, 'level_id': 3, 'content': 'Чи можете ви побудувати модель вирішуваної задачі?'},
        {'id': 9, 'level_id': 3, 'content': 'Чи вистачає вам ініціативи при вирішенні задач?'},
        {'id': 10, 'level_id': 3, 'content': 'Чи можете вирішувати проблеми, з якими ще не стикались?'},

        # Proficient questions
        {'id': 11, 'level_id': 4, 'content': 'Чи  необхідний вам весь контекст задачі?'},
        {'id': 12, 'level_id': 4, 'content': 'Чи переглядаєте ви свої наміри до вирішення задачі?'},
        {'id': 13, 'level_id': 4, 'content': 'Чи здатні  ви  навчатись у інших?'},

        # Expert questions
        {'id': 14, 'level_id': 5, 'content': 'Чи обираєте ви нові методи своєї роботи?'},
        {'id': 15, 'level_id': 5, 'content': 'Чи допомагає власна інтуїція при вирішенні задач?'},
        {'id': 16, 'level_id': 5, 'content': 'Чи застовуєте рішення задач за аналогією?'}
    ]

    for question_data in default_questions:
        question = session.query(Question).filter_by(**question_data).first()
        if not question:
            new_question = Question(**question_data)
            session.add(new_question)

    session.commit()

    # Add default values for Answers if they do not exist
    default_answers = [
        # Level 1 answers
        {'id': 1, 'question_id': 1, 'content': 'Сильно', 'points': 5},
        {'id': 2, 'question_id': 1, 'content': 'Не дуже', 'points': 3},
        {'id': 3, 'question_id': 1, 'content': 'Спокійний', 'points': 2},

        {'id': 4, 'question_id': 2, 'content': 'поступово', 'points': 2},
        {'id': 5, 'question_id': 2, 'content': 'якомога швидше', 'points': 3},
        {'id': 6, 'question_id': 2, 'content': 'дуже', 'points': 5},

        {'id': 7, 'question_id': 3, 'content': 'неодмінно', 'points': 5},
        {'id': 8, 'question_id': 3, 'content': 'поступово', 'points': 3},
        {'id': 9, 'question_id': 3, 'content': 'зрідка', 'points': 2},

        {'id': 10, 'question_id': 4, 'content': 'так', 'points': 5},
        {'id': 11, 'question_id': 4, 'content': 'в окремих випадках', 'points': 3},
        {'id': 12, 'question_id': 4, 'content': 'не потрібен', 'points': 2},

        # Level 2 answers
        {'id': 13, 'question_id': 5, 'content': 'зрідка', 'points': 5},
        {'id': 14, 'question_id': 5, 'content': 'частково', 'points': 3},
        {'id': 15, 'question_id': 5, 'content': 'ні', 'points': 2},

        {'id': 16, 'question_id': 6, 'content': 'так', 'points': 2},
        {'id': 17, 'question_id': 6, 'content': 'в окремих випадках', 'points': 3},
        {'id': 18, 'question_id': 6, 'content': 'не потрібні', 'points': 5},

        {'id': 19, 'question_id': 7, 'content': 'так', 'points': 2},
        {'id': 20, 'question_id': 7, 'content': 'частково', 'points': 3},
        {'id': 21, 'question_id': 7, 'content': 'в окремих випадках', 'points': 5},

        # Level 3 answers
        {'id': 22, 'question_id': 8, 'content': 'так', 'points': 5},
        {'id': 23, 'question_id': 8, 'content': 'не повністю', 'points': 3},
        {'id': 24, 'question_id': 8, 'content': 'в окремих випадках', 'points': 2},

        {'id': 25, 'question_id': 9, 'content': 'так', 'points': 5},
        {'id': 26, 'question_id': 9, 'content': 'зрідка', 'points': 3},
        {'id': 27, 'question_id': 9, 'content': 'потрібне натхнення', 'points': 2},

        {'id': 28, 'question_id': 10, 'content': 'так', 'points': 2},
        {'id': 29, 'question_id': 10, 'content': 'в окремих випадках', 'points': 3},
        {'id': 30, 'question_id': 10, 'content': 'ні', 'points': 5},

        # Level 4 answers
        {'id': 31, 'question_id': 11, 'content': 'так', 'points': 5},
        {'id': 32, 'question_id': 11, 'content': 'в окремих деталях', 'points': 3},
        {'id': 33, 'question_id': 11, 'content': 'в загальному', 'points': 2},

        {'id': 34, 'question_id': 12, 'content': 'так', 'points': 5},
        {'id': 35, 'question_id': 12, 'content': 'зрідка', 'points': 3},
        {'id': 36, 'question_id': 12, 'content': 'коли є потреба', 'points': 2},

        {'id': 37, 'question_id': 13, 'content': 'так', 'points': 5},
        {'id': 38, 'question_id': 13, 'content': 'зрідка', 'points': 3},
        {'id': 39, 'question_id': 13, 'content': 'коли є потреба', 'points': 2},

        # Level 5 answers
        {'id': 40, 'question_id': 14, 'content': 'так', 'points': 5},
        {'id': 41, 'question_id': 14, 'content': 'вибірково', 'points': 3},
        {'id': 42, 'question_id': 14, 'content': 'вистачає досвіду', 'points': 2},

        {'id': 43, 'question_id': 15, 'content': 'так', 'points': 5},
        {'id': 44, 'question_id': 15, 'content': 'частково', 'points': 3},
        {'id': 45, 'question_id': 15, 'content': 'при емоційному напруженні', 'points': 2},

        {'id': 46, 'question_id': 16, 'content': 'часто', 'points': 5},
        {'id': 47, 'question_id': 16, 'content': 'зрідка', 'points': 3},
        {'id': 48, 'question_id': 16, 'content': 'тільки власний варіант', 'points': 2},
    ]

    for answer_data in default_answers:
        answer = session.query(Answer).filter_by(**answer_data).first()
        if not answer:
            new_answer = Answer(**answer_data)
            session.add(new_answer)

    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('answer')
    op.drop_table('question')
    op.drop_table('user')
    op.drop_table('level')
    # ### end Alembic commands ###
